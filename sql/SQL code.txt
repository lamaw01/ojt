1. coreln

LOAD DATA LOCAL INFILE 'c:/tmp/import1_coreln.csv'
INTO TABLE coreln
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, product_code, @open_date, int_rate, penalty_rate, loan_amount, outstanding_bal, overdue_principal, interest_due_amount, pri_paid, penalty, customer_no, customer_name, account_name, account_status)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

2. mbwinln

LOAD DATA LOCAL INFILE 'c:/tmp/import2_mbwinln.csv'
INTO TABLE mbwinln
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, check_digit, @open_date, int_rate, pen_rate, principal_amt, bal_amt, over_due_pri_amt, int_bal_amt, pen_bal_amt)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

3.
ALTER TABLE tablename AUTO_INCREMENT = 1

4.
UPDATE coreln 
	SET account_no = replace(account_no, '-','');
5.
UPDATE migratedln 
    SET account_no = replace(account_no, "'",0)

6.
SELECT coreln.account_no AS coreln_account_no, mbwinln.account_no AS mbwin_account_no, migratedln.account_no AS migratedln_account_no, migratedln.old_account_no AS migratedln_old_account_no
FROM coreln
INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
ORDER BY migratedln.migratedln_id ASC;

7.
SELECT coreln.account_no AS coreln_account_no, coreln.open_date AS coreln_open_date, mbwinln.open_date AS mbwinln_open_date, coreln.int_rate AS coreln_int_rate, mbwinln.int_rate AS mbwinln_int_rate, coreln.penalty_rate AS coreln_pen_rate, mbwinln.pen_rate AS mbwinln_pen_rate, coreln.loan_amount AS coreln_loan_amt, mbwinln.principal_amt AS mbwinln_principal_amt, coreln.outstanding_bal AS coreln_outstanding_bal, mbwinln.bal_amt AS mbwinln_bal_amt, coreln.overdue_principal AS coreln_overdue_prin, mbwinln.over_due_pri_amt AS mbwinln_over_due_pri_amt, coreln.interest_due_amount AS coreln_int_due_amt, mbwinln.int_bal_amt AS mbwinln_int_bal_amt, coreln.penalty AS coreln_penalty, mbwinln.pen_bal_amt AS mbwinln_pen_bal_amt, mbwinln.account_no AS mbwin_account_no, migratedln.account_no AS migratedln_account_no, migratedln.old_account_no AS migratedln_old_account_no
FROM coreln
INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
ORDER BY migratedln.migratedln_id ASC;

8.
SELECT coreln.account_no AS coreln_account_no, mbwinln.account_no AS mbwinln_acc_no, coreln.open_date AS coreln_open_date, mbwinln.open_date AS mbwinln_open_date, coreln.int_rate AS coreln_int_rate, mbwinln.int_rate AS mbwinln_int_rate, coreln.penalty_rate AS coreln_pen_rate, mbwinln.pen_rate AS mbwinln_pen_rate, coreln.loan_amount AS coreln_loan_amt, mbwinln.principal_amt AS mbwinln_principal_amt, coreln.outstanding_bal AS coreln_outstanding_bal, mbwinln.bal_amt AS mbwinln_bal_amt, coreln.overdue_principal AS coreln_overdue_prin, mbwinln.over_due_pri_amt AS mbwinln_over_due_pri_amt, coreln.interest_due_amount AS coreln_int_due_amt, mbwinln.int_bal_amt AS mbwinln_int_bal_amt, coreln.penalty AS coreln_penalty, mbwinln.pen_bal_amt AS mbwinln_pen_bal_amt
FROM coreln
INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
ORDER BY migratedln.migratedln_id ASC;

9. SHOW DATA TO DASHBOARD_VIEW

SELECT coreln.account_no AS coreln_account_no, mbwinln.account_no AS mbwinln_acc_no, coreln.open_date AS coreln_open_date, mbwinln.open_date AS mbwinln_open_date, coreln.int_rate AS coreln_int_rate, mbwinln.int_rate AS mbwinln_int_rate, coreln.penalty_rate AS coreln_pen_rate, mbwinln.pen_rate AS mbwinln_pen_rate, coreln.loan_amount AS coreln_loan_amt, mbwinln.principal_amt AS mbwinln_principal_amt, coreln.outstanding_bal AS coreln_outstanding_bal, mbwinln.bal_amt AS mbwinln_bal_amt, coreln.overdue_principal AS coreln_overdue_prin, mbwinln.over_due_pri_amt AS mbwinln_over_due_pri_amt, coreln.interest_due_amount AS coreln_int_due_amt, mbwinln.int_bal_amt AS mbwinln_int_bal_amt, coreln.penalty AS coreln_penalty, mbwinln.pen_bal_amt AS mbwinln_pen_bal_amt
FROM coreln
INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
ORDER BY migratedln.migratedln_id ASC;

10. VALIDATOR BUTTON

SELECT migratedln.migratedln_id, coreln.account_no AS coreln_account_no, mbwinln.account_no AS mbwinln_acc_no, coreln.open_date AS coreln_open_date, mbwinln.open_date AS mbwinln_open_date, coreln.int_rate AS coreln_int_rate, mbwinln.int_rate AS mbwinln_int_rate, coreln.penalty_rate AS coreln_pen_rate, mbwinln.pen_rate AS mbwinln_pen_rate, coreln.loan_amount AS coreln_loan_amt, mbwinln.principal_amt AS mbwinln_principal_amt, coreln.outstanding_bal AS coreln_outstanding_bal, mbwinln.bal_amt AS mbwinln_bal_amt, coreln.overdue_principal AS coreln_overdue_prin, mbwinln.over_due_pri_amt AS mbwinln_over_due_pri_amt, coreln.interest_due_amount AS coreln_int_due_amt, mbwinln.int_bal_amt AS mbwinln_int_bal_amt, coreln.penalty AS coreln_penalty, mbwinln.pen_bal_amt AS mbwinln_pen_bal_amt
FROM coreln
INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
WHERE coreln.int_rate = mbwinln.int_rate
AND coreln.penalty_rate = mbwinln.pen_rate
AND coreln.loan_amount = mbwinln.principal_amt
AND coreln.outstanding_bal = mbwinln.bal_amt
AND coreln.overdue_principal = mbwinln.over_due_pri_amt
AND coreln.interest_due_amount = mbwinln.int_bal_amt
AND coreln.penalty = mbwinln.pen_bal_amt
LIMIT 15;

11. show data dashboard

SELECT migratedln.migratedln_id, coreln.account_no AS coreln_account_no, mbwinln.account_no AS mbwinln_acc_no, coreln.account_name
FROM coreln
INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
WHERE coreln.int_rate = mbwinln.int_rate
AND coreln.penalty_rate = mbwinln.pen_rate
AND coreln.loan_amount = mbwinln.principal_amt
AND coreln.outstanding_bal = mbwinln.bal_amt
AND coreln.overdue_principal = mbwinln.over_due_pri_amt
AND coreln.interest_due_amount = mbwinln.int_bal_amt
AND coreln.penalty = mbwinln.pen_bal_amt
LIMIT 15;

12.
DELIMITER ?
CREATE PROCEDURE val(IN migratedln_id INT)
BEGIN
    DECLARE id INT DEFAULT 0;
    SET id = migratedln_id;
    
    IF (SELECT stat from migratedln WHERE migratedln_id = id) THEN
    	UPDATE migratedln
       	SET stat = 1;

	END IF;
END
?

13.
DELIMITER ?
CREATE PROCEDURE val3(IN migratedln_id INT)
BEGIN
    DECLARE id INT DEFAULT 0;
    SET id = 1;
    
    IF (SELECT COUNT(stat) from migratedln WHERE stat = 0 AND migratedln_id = id) = 0 THEN
    	UPDATE migratedln
    	SET stat = 0;
    ELSE
    	UPDATE migratedln
       	SET stat = 1;

	END IF;
END
?

14.

DELIMITER ?
CREATE PROCEDURE val6(IN id INT(10))
BEGIN 

    IF (SELECT COUNT(stat) from migratedln WHERE stat = 0 AND migratedln_id = id) = 0 THEN
        UPDATE migratedln
        SET stat = 0
        WHERE migratedln_id = id;
    ELSE
        UPDATE migratedln
        SET stat = 1
        WHERE migratedln_id = id;

    END IF;
END
$this->db->call_function('pc');

15.
DELIMITER ?
CREATE PROCEDURE val(IN id INT(10))
BEGIN 

    IF (SELECT stat FROM coreln
        INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
        INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE coreln.int_rate = mbwinln.int_rate
        AND coreln.penalty_rate = mbwinln.pen_rate
        AND coreln.loan_amount = mbwinln.principal_amt
        AND coreln.outstanding_bal = mbwinln.bal_amt
        AND coreln.overdue_principal = mbwinln.over_due_pri_amt
        AND coreln.interest_due_amount = mbwinln.int_bal_amt
        AND coreln.penalty = mbwinln.pen_bal_amt
        AND migratedln.stat = 0) THEN

        UPDATE migratedln
        SET stat = 1
        WHERE migratedln_id = id;
        
    END IF;
END
?

16.
DELIMITER ?
CREATE PROCEDURE val7(IN id INT(10))
BEGIN 

    IF (SELECT * FROM coreln
        INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
        INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE coreln.int_rate) IN (SELECT * FROM mbwinln WHERE mbwinln.int_rate)
        
        THEN

        UPDATE migratedln
        SET stat = 1
        WHERE migratedln_id = id;
        
    END IF;
END
?

17.
BEGIN 

    IF (SELECT coreln.int_rate FROM coreln
        INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
        INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE coreln.int_rate) = (SELECT mbwinln.int_rate FROM mbwinl)
        AND
        (SELECT coreln.penalty_rate FROM coreln) = (SELECT mbwinln.pen_rate FROM mbwinln)
        AND
        (SELECT coreln.loan_amount FROM coreln) = (SELECT mbwinln.principal_amt FROM mbwinln)
        AND
        (SELECT coreln.outstanding_bal FROM coreln) = (SELECT mbwinln.bal_amt FROM mbwinln)
        AND
        (SELECT coreln.overdue_principal FROM coreln) = (SELECT mbwinln.over_due_pri_amt FROM mbwinln)
        AND
        (SELECT coreln.interest_due_amount FROM coreln) = (SELECT mbwinln.int_bal_amt FROM mbwinln)
        AND
        (SELECT coreln.penalty FROM coreln) = (SELECT mbwinln.pen_bal_amt FROM mbwinln)
        AND
        (SELECT migratedln.stat FROM = migratedln WHERE migratedln.stat = 0)
        AND 
        (SELECT migratedln.migratedln_id FROM migratedln WHERE migratedln.migratedln_id = id)
        
        THEN

        UPDATE migratedln
        SET stat = 1
        WHERE migratedln_id = id;
        
    END IF;
END?

18.
BEGIN 

    IF (SELECT coreln.int_rate, coreln.penalty_rate, coreln.loan_amount, coreln.outstanding_bal, coreln.overdue_principal, coreln.interest_due_amount, coreln.penalty FROM coreln
        INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
        INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE coreln.int_rate = mbwinln.int_rate
        AND coreln.penalty_rate = mbwinln.pen_rate
        AND coreln.loan_amount = mbwinln.principal_amt
        AND coreln.outstanding_bal = mbwinln.bal_amt
        AND coreln.overdue_principal = mbwinln.over_due_pri_amt
        AND coreln.interest_due_amount = mbwinln.int_bal_amt
        AND coreln.penalty = mbwinln.pen_bal_amt
        AND migratedln.stat = 0) = (SELECT mbwinln.int_rate, mbwinln.pen_rate, mbwinln.principal_amt, mbwinln.bal_amt, mbwinln.over_due_pri_amt, mbwinln.int_bal_amt, mbwinln.pen_bal_amt FROM mbwinln WHERE mbwinln.int_rate = coreln.int_rate
        AND mbwinln.pen_rate = coreln.penalty_rate
        AND mbwinln.principal_amt = coreln.loan_amount
        AND mbwinln.bal_amt = coreln.outstanding_bal
        AND mbwinln.over_due_pri_amt = coreln.overdue_principal
        AND mbwinln.int_bal_amt = coreln.interest_due_amount
        AND mbwinln.pen_bal_amt = coreln.penalty
        AND migratedln.stat = 0)
        
        THEN

        UPDATE migratedln
        SET stat = 1
        WHERE migratedln_id = id;
        
    END IF;
END
?

20.
DELIMITER ?
CREATE TRIGGER insertValln
AFTER UPDATE ON migratedln
FOR EACH ROW
BEGIN

	IF migratedln.stat = 1 THEN 
    
    	INSERT INTO validateln(coreln_id, mbwin_id, acc_name)
        VALUES(OLD.migratedln.account_no, OLD.mbwinln.account_no, OLD.coreln.account_name);
    
	END IF;
END
?

21.

BEGIN
	CASE WHEN (OLD.stat = 0) THEN
    	INSERT INTO validateln(coreln_id, mbwinln_id)
        VALUES(OLD.account_no, OLD.old_account_no);
    WHEN (OLD.stat = 1) THEN
    	INSERT INTO validateln(coreln_id, mbwinln_id)
        VALUES(OLD.account_no, OLD.old_account_no);
    ELSE BEGIN END;
    END CASE;

22.

DELIMITER ?
CREATE PROCEDURE insertValln()
BEGIN
	IF stat = 1 THEN
    INSERT INTO validateln(coreln_id,mbwinln_id)
    VALUES(account_no,old_account_no);
	END IF;
END
?
END

23.
DELIMITER ?
CREATE PROCEDURE valer(IN id INT(11))
BEGIN 

    IF (SELECT coreln.int_rate, coreln.penalty_rate, coreln.loan_amount, coreln.outstanding_bal, coreln.overdue_principal, coreln.interest_due_amount, coreln.penalty FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE coreln.open_date = mbwinln.open_date
        AND coreln.int_rate = mbwinln.int_rate
        AND coreln.penalty_rate = mbwinln.pen_rate
        AND coreln.loan_amount = mbwinln.principal_amt
        AND coreln.outstanding_bal = mbwinln.bal_amt
        AND coreln.overdue_principal = mbwinln.over_due_pri_amt
        AND coreln.interest_due_amount = mbwinln.int_bal_amt
        AND coreln.penalty = mbwinln.pen_bal_amt
        AND migratedln.stat = 0
        AND migratedln.migratedln_id = id) = (SELECT mbwinln.int_rate, mbwinln.pen_rate, mbwinln.principal_amt, mbwinln.bal_amt, mbwinln.over_due_pri_amt, mbwinln.int_bal_amt, mbwinln.pen_bal_amt FROM mbwinln 
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no                           
        WHERE mbwinln.open_date = coreln.open_date
        AND mbwinln.int_rate = coreln.int_rate
        AND mbwinln.pen_rate = coreln.penalty_rate
        AND mbwinln.principal_amt = coreln.loan_amount
        AND mbwinln.bal_amt = coreln.outstanding_bal
        AND mbwinln.over_due_pri_amt = coreln.overdue_principal
        AND mbwinln.int_bal_amt = coreln.interest_due_amount
        AND mbwinln.pen_bal_amt = coreln.penalty
        AND migratedln.stat = 0
        AND migratedln.migratedln_id = id)
        
        THEN

        UPDATE migratedln
        SET stat = 1
        WHERE migratedln_id = id;
        
    END IF;
END
?

24.
<?php
                  $query = $this->db->query("call checkval('$row->migratedln_id')");
                  mysqli_next_result($this->db->conn_id);

                  if($query->num_rows() >= 0){
                    echo '<p class="text-success">Validation Error</p>';
                  }
                ?>

25.
DELIMITER ?
CREATE PROCEDURE errln(IN id INT(11))
BEGIN
	IF (SELECT coreln.open_date FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.open_date FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln() VALUES(OLD.open_date);
	ELSEIF (SELECT coreln.int_rate FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.int_rate FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(int_rate) VALUES(OLD.int_rate);
    ELSEIF (SELECT coreln.penalty_rate FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.pen_rate FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(penalty_rate) VALUES(OLD.penalty_rate);
    ELSEIF (SELECT coreln.loan_amount FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.principal_amt FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(loan_amount) VALUES(OLD.loan_amount);
    ELSEIF (SELECT coreln.outstanding_bal FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.bal_amt FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(outstanding_bal) VALUES(OLD.outstanding_bal);
    ELSEIF (SELECT coreln.overdue_principal FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.over_due_pri_amt FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(overdue_principal) VALUES(OLD.overdue_principal);
    ELSEIF (SELECT coreln.interest_due_amount FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.int_bal_amt FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(interest_due_amount) VALUES(OLD.interest_due_amount);
    ELSEIF (SELECT coreln.penalty FROM coreln
        LEFT JOIN migratedln ON migratedln.account_no = coreln.account_no
        LEFT JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
        WHERE migratedln.migratedln_id = id) != (SELECT mbwinln.pen_bal_amt FROM mbwinln
        LEFT JOIN migratedln ON migratedln.old_account_no = mbwinln.account_no
        LEFT JOIN coreln ON migratedln.account_no = coreln.account_no
        WHERE migratedln.migratedln_id = id) THEN
        INSERT INTO errorln(penalty) VALUES(OLD.penalty);
        
    END IF;
END
?

26.
DELIMITER ?
CREATE PROCEDURE errln(IN id INT(11))
BEGIN
	
	IF (SELECT coreln.int_rate FROM coreln) != (SELECT mbwinln.int_rate FROM mbwinln) THEN
        INSERT INTO errorln(int_rate) VALUES(OLD.int_rate);
        WHERE coreln.coreln_id = id;
    ELSEIF (SELECT coreln.penalty_rate FROM coreln) != (SELECT mbwinln.pen_rate FROM mbwinln) THEN
        INSERT INTO errorln(penalty_rate) VALUES(OLD.penalty_rate);
         WHERE coreln.coreln_id = id;
    ELSEIF (SELECT coreln.loan_amount FROM coreln) != (SELECT mbwinln.principal_amt FROM mbwinln) THEN
        INSERT INTO errorln(loan_amount) VALUES(OLD.loan_amount);
         WHERE coreln.coreln_id = id;
    ELSEIF (SELECT coreln.outstanding_bal FROM coreln) != (SELECT mbwinln.bal_amt FROM mbwinln) THEN
        INSERT INTO errorln(outstanding_bal) VALUES(OLD.outstanding_bal);
         WHERE coreln.coreln_id = id;
    ELSEIF (SELECT coreln.overdue_principal FROM corel) != (SELECT mbwinln.over_due_pri_amt FROM mbwinln) THEN
        INSERT INTO errorln(overdue_principal) VALUES(OLD.overdue_principal);
         WHERE coreln.coreln_id = id;
    ELSEIF (SELECT coreln.interest_due_amount FROM coreln) != (SELECT mbwinln.int_bal_amt FROM mbwinln) THEN
        INSERT INTO errorln(interest_due_amount) VALUES(OLD.interest_due_amount);
         WHERE coreln.coreln_id = id;
    ELSEIF (SELECT coreln.penalty FROM coreln) != (SELECT mbwinln.pen_bal_amt FROM mbwinln) THEN
        INSERT INTO errorln(penalty) VALUES(OLD.penalty);
         WHERE coreln.coreln_id = id;
        
    END IF;
END
?

27.
DELIMITER ?
CREATE PROCEDURE errln(IN id INT(11))
BEGIN
	
	IF (SELECT int_rate FROM coreln WHERE coreln_id = id) != (SELECT int_rate FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(int_rate) VALUES(OLD.int_rate);
    ELSEIF (SELECT penalty_rate FROM coreln WHERE coreln_id = id) != (SELECT pen_rate FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(penalty_rate) VALUES(OLD.penalty_rate);
    ELSEIF (SELECT loan_amount FROM coreln WHERE coreln_id = id) != (SELECT principal_amt FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(loan_amount) VALUES(OLD.loan_amount);
    ELSEIF (SELECT outstanding_bal FROM coreln WHERE coreln_id = id) != (SELECT bal_amt FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(outstanding_bal) VALUES(OLD.outstanding_bal);
    ELSEIF (SELECT overdue_principal FROM coreln WHERE coreln_id = id) != (SELECT over_due_pri_amt FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(overdue_principal) VALUES(OLD.overdue_principal);
    ELSEIF (SELECT interest_due_amount FROM coreln WHERE coreln_id = id) != (SELECT int_bal_amt FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(interest_due_amount) VALUES(OLD.interest_due_amount);
    ELSEIF (SELECT penalty FROM coreln WHERE coreln_id = id) != (SELECT pen_bal_amt FROM mbwinln WHERE mbwinln_id = id) THEN
        INSERT INTO errorln(penalty) VALUES(OLD.penalty);
        
    END IF;

28.
CREATE TRIGGER `insertErrln` AFTER UPDATE ON `coreln`
 FOR EACH ROW BEGIN
	IF (SELECT int_rate FROM coreln) != (SELECT int_rate FROM mbwinln) THEN
        INSERT INTO errorln(account_no, int_rate) VALUES(OLD.account_no, OLD.int_rate);
    ELSEIF (SELECT penalty_rate FROM coreln) != (SELECT pen_rate FROM mbwinln) THEN
        INSERT INTO errorln(account_no, penalty_rate) VALUES(OLD.account_no, OLD.penalty_rate);
    ELSEIF (SELECT loan_amount FROM coreln) != (SELECT principal_amt FROM mbwinln) THEN
        INSERT INTO errorln(account_no, loan_amount) VALUES(OLD.account_no, OLD.loan_amount);
    ELSEIF (SELECT outstanding_bal FROM coreln) != (SELECT bal_amt FROM mbwinln) THEN
        INSERT INTO errorln(account_no, outstanding_bal) VALUES(OLD.account_no, OLD.outstanding_bal);
    ELSEIF (SELECT overdue_principal FROM coreln) != (SELECT over_due_pri_amt FROM mbwinln) THEN
        INSERT INTO errorln(account_no, overdue_principal) VALUES(OLD.account_no, OLD.overdue_principal);
    ELSEIF (SELECT interest_due_amount FROM coreln) != (SELECT int_bal_amt FROM mbwinln) THEN
        INSERT INTO errorln(account_no, interest_due_amount) VALUES(OLD.account_no, OLD.interest_due_amount);
    ELSEIF (SELECT penalty FROM coreln) != (SELECT pen_bal_amt FROM mbwinln) THEN
        INSERT INTO errorln(account_no, penalty) VALUES(OLD.account_no, OLD.penalty);
        
    END IF;

END
END
?

28. trigger

CREATE TRIGGER `insertValidateln` AFTER UPDATE ON `migratedln`
 FOR EACH ROW BEGIN
 
    INSERT INTO validateln(coreln_id, mbwinln_id)
    VALUES(OLD.account_no, OLD.old_account_no);

END

29.
LOAD DATA LOCAL INFILE 'c:/tmp/import4_mbwinsv.csv'
INTO TABLE mbwinsv
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, check_digit, @open_date, bal_amt, int_bal_amt, account_name)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

30.
LOAD DATA LOCAL INFILE 'c:/tmp/import6_migratedsv.csv'
INTO TABLE migratedsv
FIELDS TERMINATED BY ',' ENCLOSED BY '.'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, old_account_no, check_digit, branch);

31.
LOAD DATA LOCAL INFILE 'c:/tmp/import6_migratedsv.csv'
INTO TABLE migratedsv
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, account_no, old_account_no, check_digit, branch, stat)


31. SAVINGS SHOW DATA
SELECT migratedsv.migratedsv_id, coresv.account_no AS coresv_account_no, mbwinsv.account_no AS mbwinsv_account_no, coresv.account_name
FROM coresv
INNER JOIN migratedsv ON migratedsv.account_no = coresv.account_no
INNER JOIN mbwinsv ON migratedsv.old_account_no = mbwinsv.account_no

32. show data sv
SELECT migratedsv.migratedsv_id, coresv.account_no AS coresv_account_no, mbwinsv.account_no AS mbwinsv_account_no, coresv.account_name
FROM coresv
INNER JOIN migratedsv ON migratedsv.account_no = coresv.account_no
INNER JOIN mbwinsv ON migratedsv.old_account_no = mbwinsv.account_no
WHERE coresv.open_date = mbwinsv.open_date
AND coresv.current_bal = mbwinsv.bal_amt
AND coresv.interest = mbwinsv.int_bal_amt
AND coresv.account_name = mbwinsv.account_name

33.
DELIMITER ?
CREATE PROCEDURE checkvalsv(IN id INT(11))
BEGIN
    SELECT migratedsv.migratedsv_id, coresv.account_no AS coresv_account_no, mbwinsv.account_no AS mbwinsv_acc_no, coresv.open_date AS coresv_open_date, mbwinsv.open_date AS mbwinsv_open_date, coresv.current_bal AS coresv_current_bal, mbwinsv.bal_amt AS mbwinsv_bal_amt, coresv.interest AS coresv_interest, mbwinsv.int_bal_amt AS mbwinsv_int_bal_amt, coresv.account_name AS coresv_acc_name, mbwinsv.account_name AS mbwinsv_acc_name
    FROM coresv
    INNER JOIN migratedsv ON migratedsv.account_no = coresv.account_no
    INNER JOIN mbwinsv ON migratedsv.old_account_no = mbwinsv.account_no
    WHERE coresv.open_date = mbwinsv.open_date
    AND coresv.current_bal = mbwinsv.bal_amt
    AND coresv.interest = mbwinsv.int_bal_amt
    AND coresv.account_name = mbwinsv.account_name;

END
?

34.
DELIMITER ?
CREATE PROCEDURE errsv(IN id INT(11))
BEGIN 

    IF (SELECT coresv.open_date, coresv.current_bal, coresv.interest FROM coresv WHERE coresv.coresv_id = id) <> (SELECT mbwinsv.open_date, mbwinsv.bal_amt, mbwinsv.int_bal_amt FROM mbwinsv WHERE mbwinsv.mbwinsv_id = id)
        
        THEN

        UPDATE coresv
        SET stat = 2
        WHERE coresv_id = id;
        
    END IF;
END
?

35.
DELIMITER ?
CREATE TRIGGER insertValidatesv
AFTER UPDATE ON migratedsv
FOR EACH ROW
BEGIN

	IF migratedsv.stat = 1 THEN 
    
    	INSERT INTO validatesv(coresv_id, mbwinsv_id)
        VALUES(OLD.account_no, OLD.old_account_no);
    
	END IF;
END
?

36.
LOAD DATA LOCAL INFILE 'c:/tmp/import7_mbwintd.csv'
INTO TABLE mbwintd
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\r'
IGNORE 1 ROWS
(account_no, check_digit, @open_date, bal_amt, int_bal_amt, account_name)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

37.
LOAD DATA LOCAL INFILE 'c:/tmp/import7_mbwintd.csv'
INTO TABLE mbwintd
FIELDS TERMINATED BY '\t' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, check_digit, @open_date, bal_amt, int_bal_amt, account_name)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

38.
LOAD DATA LOCAL INFILE 'c:/tmp/import8_coretd.csv'
INTO TABLE coretd
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, product_code, @open_date, issue_amount, principal_amount, interest, customer_no, customer_name, account_name, account_status)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

39.
LOAD DATA LOCAL INFILE 'c:/tmp/import9_migratedtd.csv'
INTO TABLE migratedtd
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(account_no, old_account_no, check_digit, branch)

40.
DELIMITER ?
CREATE PROCEDURE checkvaltd(IN id INT(11))
BEGIN
    SELECT migratedtd.migratedtd_id, coretd.account_no AS coretd_account_no, mbwintd.account_no AS mbwintd_acc_no
    FROM coretd
    INNER JOIN migratedtd ON migratedtd.account_no = coretd.account_no
    INNER JOIN mbwintd ON migratedtd.old_account_no = mbwintd.account_no
    WHERE coretd.open_date = mbwintd.open_date
    AND coretd.principal_amount = mbwintd.bal_amt
    AND coretd.interest = mbwintd.int_bal_amt
    AND migratedtd.migratedtd_id = id;

END
?

41.
SELECT migratedtd.migratedtd_id, coretd.account_no AS coretd_account_no, mbwintd.account_no AS mbwintd_acc_no 
FROM coretd 
INNER JOIN migratedtd ON migratedtd.account_no = coretd.account_no 
INNER JOIN mbwintd ON migratedtd.old_account_no = mbwintd.account_no 
WHERE coretd.open_date = mbwintd.open_date 
AND coretd.principal_amount = mbwintd.bal_amt
AND coretd.interest = mbwintd.int_bal_amt

42. erase \n
UPDATE mbwintd SET account_no = REPLACE(account_no, '\n', '')

43.
BEGIN

	SELECT migratedln.migratedln_id, mbwinln.open_date AS mbwinln_open_date, mbwinln.int_rate AS mbwinln_int_rate, mbwinln.pen_rate AS mbwinln_pen_rate, mbwinln.principal_amt AS mbwinln_principal_amt, mbwinln.bal_amt AS mbwinln_bal_amt, mbwinln.over_due_pri_amt AS mbwinln_over_due, mbwinln.int_bal_amt AS mbwinln_bal_amt, mbwinln.pen_bal_amt AS mbwinln_pen_bal, coreln.open_date AS coreln_open_date, coreln.int_rate AS coreln_int_rate, coreln.penalty_rate AS coreln_pen_rate, coreln.loan_amount AS coreln_loan_amount, coreln.outstanding_bal AS coreln_out_bal, coreln.overdue_principal AS coreln_over_due, coreln.penalty AS coreln_penalty
	FROM coreln
    INNER JOIN migratedln ON migratedln.account_no = coreln.account_no
    INNER JOIN mbwinln ON migratedln.old_account_no = mbwinln.account_no
    WHERE coreln.stat = 2
    AND coreln.account_no = id;

END

44.
ALTER TABLE `coretd` CHANGE `account_name` `account_name` VARCHAR(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;

45.

DELIMITER ?
CREATE TRIGGER detln
AFTER INSERT on coreln
FOR EACH ROW
BEGIN
	UPDATE coreln 
	SET account_no = replace(account_no, '-','');
END
?

46.

DELIMITER ?
CREATE TRIGGER detlsv
AFTER INSERT on coresv
FOR EACH ROW
BEGIN
	UPDATE coresv
	SET account_no = replace(account_no, '-','');
END
?

47.

DELIMITER ?
CREATE TRIGGER updateln
AFTER INSERT on migratedln
FOR EACH ROW
BEGIN
	UPDATE migratedln
    SET account_no = replace(account_no, "'",0);
END
?

48.

DELIMITER ?
CREATE TRIGGER updatesv
AFTER INSERT on migratedsv
FOR EACH ROW
BEGIN
	UPDATE migratedsv
    SET account_no = replace(account_no, "'",0);
END
?

49.
DELIMITER ?
CREATE TRIGGER insertErrorsv
BEFORE UPDATE ON migratedsv
FOR EACH ROW
BEGIN
 
    INSERT INTO errorsv(coresv_id, mbwinsv_id)
    VALUES(OLD.account_no, OLD.old_account_no);

END
?

50.
DELIMITER ?
CREATE TRIGGER insertErrortd
BEFORE UPDATE ON migratedtd
FOR EACH ROW
BEGIN
 
    INSERT INTO errortd(coretd_id, mbwintd_id)
    VALUES(OLD.account_no, OLD.old_account_no);

END
?

51.

DELIMITER ?
CREATE TRIGGER insertInquireln
AFTER INSERT ON validateln
FOR EACH ROW
BEGIN
	INSERT INTO inquireln(account_no, old_account_no)
    VALUES(coreln_id, mbwinln_id);
END
?

52.

DELIMITER ?
CREATE TRIGGER errorinquireln
AFTER INSERT ON errorln
FOR EACH ROW
BEGIN
	INSERT INTO inquireln(account_no, old_account_no)
    VALUES(coreln_id, mbwinln_id);
END
?


















53. CALL PROCEDURE TO INSERT IMPORT CORELN

LOAD DATA LOCAL INFILE 'c:/tmp/CORE/CORELN.csv'
INTO TABLE coreln
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS
(account_no, product_code, @open_date, int_rate, penalty_rate, loan_amount, outstanding_bal, overdue_principal, interest_due_amount, pri_paid, penalty, customer_no, customer_name, account_name, account_status)
SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');


54.

DELIMITER ?
CREATE PROCEDURE removedashln()
BEGIN
	UPDATE coreln
    	SET account_no = replace(account_no, '-','');
END
?

55. 
DELIMITER ?
CREATE PROCEDURE importCoreLn()
BEGIN
	LOAD DATA LOCAL INFILE 'c:/tmp/CORE/CORELN.csv'
    INTO TABLE coreln
    FIELDS TERMINATED BY ',' 
    OPTIONALLY ENCLOSED BY '"'
    LINES TERMINATED BY '\r\n'
    IGNORE 1 ROWS
    (account_no, product_code, @open_date, int_rate, penalty_rate, loan_amount, outstanding_bal, overdue_principal, interest_due_amount, pri_paid, penalty, customer_no, customer_name, account_name, account_status)
    SET open_date = STR_TO_DATE(@open_date, '%m/%d/%Y');

END
?

56.
DELIMITER ?
CREATE PROCEDURE eraseDashLoan()
BEGIN
	UPDATE coreln
    	SET account_no = replace(account_no, '-','');
END

57.
DELIMITER ?
CREATE PROCEDURE eraseDashSavings
BEGIN
	UPDATE coresv
    	SET account_no = replace(account_no, '-','');
END
?

58.
DELIMITER ?
CREATE PROCEDURE eraseDashTimeDeposit()
BEGIN
	UPDATE coretd
    	SET account_no = replace(account_no, '-','');
END
?